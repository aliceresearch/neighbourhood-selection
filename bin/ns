#!/usr/bin/env ruby

require 'commander/import'
require 'neighbourhood-selection'

# Specify version number here
VERSION = '0.0.1'

# For commander
program :version, VERSION
program :description, "A simulation tool for the relevant neighbourhood selection problem."

# Default to the intro / help page
default_command :help

command :run do |c|
  c.syntax = "ns run <sim_name>

    Run a simulation with the configuration sim_name."

  c.description = "Run a simulation."
  c.option '--config <filename>', String, 'Use the specified configuration file instead of the default.'

  c.action do |args, options|

    # Set this to be the maintainer to pull packages for.
    if args[0]
      sim_name = args[0]
    else
      warn "You must specify a simulation name."
      exit
    end

    # Set up output files
    taus_file = File.open("#{sim_name}.taus", 'w')
    node_utilities_file = File.open("#{sim_name}.node_utilities", 'w')
    conjoint_utilities_file = File.open("#{sim_name}.conjoint_utilities", 'w')

    # If we've been passed a --config <filename>, then use that instead of
    # 'config/simulation.yml'
    #
    # Create the simulation itself:
    if options.file
      sim = Simulator.new sim_name, options.file
    else
      sim = Simulator.new sim_name
    end


    # Some initial output
    if sim.debug?
      puts "Beginning simulation with #{sim.nodes.length} nodes."
      print "Node IDs are:"
      sim.nodes.each { |i|
        print " #{i.node_id}"
      }
      puts "."
    end

    # Run a number of simulation steps.
    # Simulator.step can take a block. If one is passed in, then this is executed at
    # the end of each time step.
    10000.times do
      sim.step do
        # This block is executed at the end of each time step. It can be used for
        # collecting data and printing it out, for example.

        # We're only really interested in tracking one node, node 0
        interesting_node = sim.nodes.find { |n| n.node_id==0 }

        # Print out the utility and tau associated with each possible node.
        interesting_node.print_taus taus_file
        interesting_node.print_total_utilities node_utilities_file

        # Just print the cumulative conjoint utility so far
        interesting_node.print_cumulative_conjoint_utility conjoint_utilities_file
      end
    end

    # Close the files
    taus_file.close
    node_utilities_file.close
    conjoint_utilities_file.close

  end
end
